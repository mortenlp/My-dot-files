/* Include stuff */
#include <ilcplex/cplex.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[])
{
  /* CPLEX structures. */
  CPXENVptr env = NULL;        /* CPLEX enviroment. */
  CPXLPptr lp = NULL;          /* Specific object */

  /* Input file. */
  char *filename= NULL;

  /* Misc. data. */
  int status = 0;

  /* Must parse a filename to the program. */
  if( argc != 2 )
    {
      printf("syntax: filename needs to be specified...\n");
      exit(0);
    }
  filename= argv[1];

  /* Initialize CPLEX. If a licence is unavailable the
     program waits 5 seconds and asks for licence again. */
  while( !env )
    {
      env= CPXopenCPLEX(&status);
      if ( !env )
        {
          printf ("CPLEX License unavailable %d... sleeping 5 seconds...\n",
                  status);
          sleep(5);
        }
    }

  /* Create the lp object */
  if( status || lp == NULL)
    {
      printf("Could not create or_lp-problem\n");
      exit(0);
    }

  /* Read problem into Cplex. */
  CPXreadcopyprob(env, lp, filename, NULL);

  /* OPTIMIZE */
  status = CPXlpopt (env, lp);
  if (status)
    printf ("Error while optimizing!\n");

  /* Free all CPLEX objects memory. */
  if ( lp != NULL)
    {
      status = CPXfreeprob (env, &lp);
      if ( status )
        fprintf (stderr, "CPXfreeprob failed, error code %d.\n", status);
    }


  /* Close CPLEX. */
  if ( env != NULL )
    {
      status = CPXcloseCPLEX (&env);

      /* Note that CPXcloseCPLEX produces no output,
         so the only way to see the cause of the error is to use
         CPXgeterrorstring.  For other CPLEX routines, the errors will
         be seen if the CPX_PARAM_SCRIND indicator is set to CPX_ON. */

      if ( status )
        {
          char  errmsg[1024];
          fprintf (stderr, "Could not close CPLEX environment.\n");
          CPXgeterrorstring (env, status, errmsg);
          fprintf (stderr, "%s", errmsg);
        }
    }

  return 0;
}
