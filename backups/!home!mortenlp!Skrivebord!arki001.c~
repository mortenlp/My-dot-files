/* ---------------------------------------------------------------- */
/* Example showing how to use certain parts of the callable library */
/* ---------------------------------------------------------------- */
/* Note: No error handling                                          */
/* ---------------------------------------------------------------- */
/* Author: Morten Leander Petersen                                  */
/* February, 2011                                                   */
/* ---------------------------------------------------------------- */
/* To execute this program run: ./example   filename                */
/* ---------------------------------------------------------------- */

#include <ilcplex/cplex.h>
#include <string.h>
#include <stdlib.h>


int main(int argc, char *argv[])
{
  if (argc != 2)
    {
      printf ("Run the program using the following \"formula\": \n");
      printf ("./example  filename\n");
      return 0;
    }

  int cur_numcols, j;		/* Number of variables and iterator */
  double *x= NULL;		/* Array for solution */

  double objval;		/* To store the objective value */
  int status= 0;		/* To keep track of success status */

  /* Setup environment */
  CPXENVptr env= NULL;
  CPXLPptr lp= NULL;

  /* Open CPLEX object */
  env= CPXopenCPLEX (&status);

  /* Turn on output to screen */
  CPXsetintparam (env, CPX_PARAM_SCRIND, CPX_ON);

  /* Instantiates object env an gives it a name */
  lp = CPXcreateprob (env, &status, "name");

  /* Reads the problem from file */
  CPXreadcopyprob (env, lp, argv[1], NULL);

  /* Optimize model */
  CPXmipopt (env, lp);

  /* Objective value --> objval */
  CPXgetobjval (env, lp, &objval);

  /* #variables --> cur_numcols */
  cur_numcols= CPXgetnumcols (env, lp);

  /* Allocates memory to the solution array, x */
  x = malloc (cur_numcols*sizeof(*x));

  /* Solution --> x */
  CPXgetx (env, lp, x, 0, cur_numcols-1);

  /* Print the solution */
  for (j = 0; j < cur_numcols; j++)
    {
      printf ("Column %d:    value: %lf\n", j, x[j]);
    }
  printf ("Objective value: %lf\n", objval);

  /* Free pointer */
  if (x != NULL)
    {
      free (x);
      x= NULL;
    }

  CPXwriteprob (env, lp, "test.lp", NULL);

  /* Free and close */
  CPXfreeprob (env, &lp);
  CPXcloseCPLEX (&env);

  return (0);
}
